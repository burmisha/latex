import logging

log = logging.getLogger('task')

class Task(object):
    def __init__(self, text, answer=None, number=None):
        self.Text = text
        self.Answer = answer
        self.Number = number
        filename = '%s.tex' % self.Number
        log.debug('Got filename %r from %r', filename, self.Number)
        self._Filename = filename

    def Strip(self, lines):
        return lines
        # assert lines
        # minSpaces = None
        # for line in lines:
        #     if line:
        #         candidate = len(line) - len(line.lstrip(' '))
        #         if minSpaces is None or candidate < minSpaces:
        #             minSpaces = candidate
        # log.debug('Got minimum of %r spaces in %d lines', minSpaces, len(lines))
        # for line in lines:
        #     yield line[minSpaces:].rstrip(' ')

    def GetTex(self):
        lines = self.Text.split('. ')
        text = '.\n'.join('    ' + line for line in self.Strip(lines))
        result = None
        try:
            result = (u'''\\task{\n%s\n}\n''' % text).replace('\\\\u', '\\u')
        except Exception:
            log.exception('Failed to get LaTeX on %r', self.Text)
            raise
        if self.Answer:
            try:
                result += (u'''\\answer{\n    %s\n}\n''' % self.Answer).replace('\\\\u', '\\u')
            except Exception:
                log.exception('Failed to get LaTeX on answer %r', self.Answer)
                raise
        result += u'% autogenerated\n'
        return result        

    def GetFilename(self):
        return self._Filename


class TasksGenerator(object):
    def __call__(self):
        raise NotImplementedError()
