import os
import re
import shutil

import logging
log = logging.getLogger(__name__)


def udrPath(*args):
    path = os.path.join(os.environ['HOME'], 'Yandex.Disk.localized', u'УДР', u'Общие материалы физиков УДР', *args)
    log.debug('Using path %s', path)
    return path


class UdrPath(object):
    def __init__(self, *path):
        self.__Path = path

    def __call__(self, *path, **kws):
        resPath = self.__Path + path
        resPath = udrPath(*resPath)
        if kws.get('create_missing_dir') is True and not os.path.isdir(resPath):
            log.warn(u'Create missing %s', resPath)
            os.mkdir(resPath)
        return resPath


def walkFiles(
    dirName,
    extensions=[],
    dirsOnly=False,
    recursive=True,
    regexp=None,
):
    # dirName = str(dirname)
    logName = 'dirs' if dirsOnly else 'files'
    log.debug('Looking for %s of types %r in %s', logName, extensions, dirName)
    count = 0
    if not os.path.exists(dirName):
        log.error('Path %r is missing', dirName)

    if regexp is not None:
        if not isinstance(regexp, list):
            regexps = [regexp]
        else:
            regexps = regexp
    else:
        regexps = []

    iterable = os.walk(dirName)
    if not recursive:
        iterable = [next(iterable)]
    for root, dirs, files in iterable:
        if dirsOnly:
            for directory in dirs:
                count += 1
                yield os.path.join(root, directory)
        else:
            for filename in files:
                if not extensions or any(filename.endswith(extension) for extension in extensions):
                    if not regexps or any(re.match(regexp, filename) for regexp in regexps):
                        if filename.startswith('~$'):
                            log.warn('Skipping %s in %s', filename, root)
                        else:
                            yield os.path.join(root, filename)
    log.debug('Found %d %s in %s', count, logName, dirName)


class FileWriter(object):
    def __init__(self, nameFilter=None):
        self.NameFilter = nameFilter
        self.WrittenFiles = set()

    def NotMatches(self, filename):
        return self.NameFilter and self.NameFilter not in filename

    def Write(self, *pathParts, **kwargs):
        assert pathParts
        filename = os.path.join(*pathParts)
        assert filename

        text = kwargs.get('text')
        assert text

        self.WrittenFiles.add(filename)
        log.info('Saving file %s', filename)
        with open(filename, 'w') as f:
            f.write(text.strip())
            f.write('\n% autogenerated\n')

    def ShowManual(self, extensions=[]):
        allFiles = set()
        dirs = set(os.path.dirname(filename) for filename in self.WrittenFiles)
        for dirname in dirs:
            for filename in walkFiles(dirname, extensions=extensions):
                allFiles.add(filename)

        manualFiles = sorted(allFiles - self.WrittenFiles)
        log.info('Got %d manual files in %r', len(manualFiles), sorted(dirs))
        for index, manualFile in enumerate(manualFiles):
            log.info('  Manual file %3d: %s', index, manualFile)


class FileCopier(object):
    def __init__(self, source_file, destination_dir=None):
        assert os.path.exists(source_file)
        assert os.path.isfile(source_file)
        self._source_file = source_file
        log.info(u'Using source file \'%s\'', self._source_file)

        if destination_dir is None:
            self._destination_dir = None
        else:
            self.SetDestinationDir(destination_dir)

    def SetDestinationDir(self, destination_dir):
        assert os.path.exists(destination_dir)
        assert os.path.isdir(destination_dir)
        self._destination_dir = destination_dir
        log.info(u'Using destination dir \'%s\'', self._destination_dir)

    def CreateFile(self, destination_file):
        if self._destination_dir:
            destination_path = os.path.join(self._destination_dir, destination_file)
        else:
            destination_path = destination_file

        # never overwrite file
        if not os.path.exists(destination_path):
            log.info(u'Creating \'%s\' from template', destination_path)
            shutil.copy(self._source_file, destination_path)
        else:
            log.debug(u'File %s already exists', destination_path)


def is_older(first_file, second_file):
    assert os.path.exists(first_file)
    assert os.path.isfile(first_file)
    if not os.path.exists(second_file):
        return False
    elif os.path.isdir(second_file):
        raise RuntimeError(f'\'{second_file}\' is not a file')
    else:
        first_mtime = os.path.getmtime(first_file)
        second_mtime = os.path.getmtime(second_file)
        return first_mtime < second_mtime
