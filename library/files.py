# -*- coding: utf-8 -*-

import logging
import os

log = logging.getLogger(__name__)


def udrPath(*args):
    return os.path.join(os.environ['HOME'], 'Yandex.Disk.localized', u'УДР', u'Общие материалы физиков УДР', *args)


class UdrPath(object):
    def __init__(self, *path):
        self.__Path = path

    def __call__(self, *path, **kws):
        resPath = self.__Path + path
        resPath = udrPath(*resPath)
        if kws.get('create_missing_dir') is True and not os.path.isdir(resPath):
            log.warn(u'Create missing %s', resPath)
            os.mkdir(resPath)
        return resPath


def walkFiles(dirName, extensions=[], dirsOnly=False):
    # dirName = str(dirname)
    logName = 'dirs' if dirsOnly else 'files'
    log.debug('Looking for %s of types %r in %s', logName, extensions, dirName)
    count = 0
    if not os.path.exists(dirName):
        log.error('Path %r is missing', dirName)
    for root, dirs, files in os.walk(dirName):
        if dirsOnly:
            for directory in dirs:
                count += 1
                yield os.path.join(root, directory)
        else:
            for filename in files:
                if not extensions or any(filename.endswith(extension) for extension in extensions):
                    count += 1
                    yield os.path.join(root, filename)
    log.debug('Found %d %s in %s', count, logName, dirName)


class FileWriter(object):
    def __init__(self, nameFilter=None):
        self.NameFilter = nameFilter
        self.WrittenFiles = set()

    def NotMatches(self, filename):
        return self.NameFilter and self.NameFilter not in filename

    def Write(self, *pathParts, **kwargs):
        assert pathParts
        filename = os.path.join(*pathParts)
        assert filename

        text = kwargs.get('text')
        assert text

        self.WrittenFiles.add(filename)
        log.info('Saving file %s', filename)
        with open(filename, 'w') as f:
            f.write(text.strip().encode('utf-8'))
            f.write('\n% autogenerated\n')

    def ShowManual(self, extensions=[]):
        allFiles = set()
        dirs = set(os.path.dirname(filename) for filename in self.WrittenFiles)
        for dirname in dirs:
            for filename in walkFiles(dirname, extensions=extensions):
                allFiles.add(filename)

        manualFiles = sorted(allFiles - self.WrittenFiles)
        log.info('Got %d manual files in %r', len(manualFiles), sorted(dirs))
        for index, manualFile in enumerate(manualFiles):
            log.info('  Manual file %3d: %s', index, manualFile)
