import logging
log = logging.getLogger(__name__)


class Vapor:
    T_P_Pmm_rho = [
        (0, 0.611, 4.58, 4.84),
        (1, 0.656, 4.92, 5.22),
        (2, 0.705, 5.29, 5.60),
        (3, 0.757, 5.68, 5.98),
        (4, 0.813, 6.10, 6.40),
        (5, 0.872, 6.54, 6.84),
        (6, 0.934, 7.01, 7.3),
        (7, 1.01, 7.57, 7.8),
        (8, 1.07, 8.05, 8.3),
        (9, 1.15, 8.61, 8.8),
        (10, 1.23, 9.21, 9.4),
        (11, 1.31, 9.84, 10.0),
        (12, 1.40, 10.52, 10.7),
        (13, 1.50, 11.23, 11.4),
        (14, 1.59, 11.99, 12.1),
        (15, 1.70, 12.79, 12.8),
        (16, 1.81, 13.63, 13.6),
        (17, 1.94, 14.53, 14.5),
        (18, 2.06, 15.48, 15.4),
        (19, 2.19, 16.48, 16.3),
        (20, 2.34, 17.54, 17.3),
        (21, 2.48, 18.6, 18.3),
        (22, 2.64, 19.8, 19.4),
        (23, 2.81, 21.1, 20.6),
        (24, 2.99, 22.4, 21.8),
        (25, 3.17, 23.8, 23.0),
        (30, 4.24, 31.8, 30.3),
        (40, 7.37, 55.3, 51.2),
        (50, 12.3, 92.5, 83.0),
        (60, 19.9, 149.4, 130),
        (70, 31.0, 233.7, 198),
        (80, 47.3, 355.1, 293),
        (90, 70.1, 525.8, 424),
        (100, 101.3, 760.0, 598),
    ]

    # from http://school-physics.spb.ru/data/labs/Saturated_steam.pdf
    T_Pmm_P_rho_2 = [
        (-20, 0.8, 0.10, 1.5),
        (-19, 0.9, 0.11, 1.5),
        (-18, 0.9, 0.12, 1.6),
        (-17, 1.0, 0.14, 1.7),
        (-16, 1.1, 0.15, 1.8),
        (-15, 1.2, 0.17, 1.9),
        (-14, 1.4, 0.18, 2.0),
        (-13, 1.5, 0.20, 2.2),
        (-12, 1.6, 0.22, 2.3),
        (-11, 1.8, 0.24, 2.4),
        (-10, 1.9, 0.26, 2.6),
        (-9, 2.1, 0.28, 2.8),
        (-8, 2.3, 0.31, 2.9),
        (-7, 2.5, 0.34, 3.1),
        (-6, 2.8, 0.37, 3.3),
        (-5, 3.0, 0.40, 3.6),
        (-4, 3.3, 0.44, 3.8),
        (-3, 3.6, 0.48, 4.0),
        (-2, 3.9, 0.52, 4.3),
        (-1, 4.2, 0.56, 4.6),
        (0, 4.6, 0.61, 4.9),
        (1, 4.9, 0.66, 5.3),
        (2, 5.3, 0.71, 5.6),
        (3, 5.7, 0.76, 6.0),
        (4, 6.1, 0.81, 6.4),
        (5, 6.5, 0.87, 6.8),
        (6, 7.0, 0.93, 7.3),
        (7, 7.5, 1.00, 7.7),
        (8, 8.1, 1.07, 8.3),
        (9, 8.6, 1.15, 8.8),
        (10, 9.2, 1.23, 9.4),
        (11, 9.8, 1.31, 10.0),
        (12, 10.5, 1.40, 10.6),
        (13, 11.2, 1.50, 11.3),
        (14, 12.0, 1.60, 12.0),
        (15, 12.8, 1.71, 12.8),
        (16, 13.6, 1.82, 13.6),
        (17, 14.5, 1.94, 14.4),
        (18, 15.5, 2.06, 15.3),
        (19, 16.5, 2.20, 16.3),
        (20, 17.5, 2.34, 17.3),
        (21, 18.7, 2.49, 18.3),
        (22, 19.8, 2.64, 19.4),
        (23, 21.1, 2.81, 20.5),
        (24, 22.4, 2.98, 21.7),
        (25, 23.8, 3.17, 23.0),
        (26, 25.2, 3.36, 24.3),
        (27, 26.7, 3.57, 25.7),
        (28, 28.4, 3.78, 27.2),
        (29, 30.0, 4.01, 28.8),
        (30, 31.8, 4.24, 30.4),
        (31, 33.7, 4.49, 32.0),
        (32, 35.7, 4.75, 33.8),
        (33, 37.7, 5.03, 35.7),
        (34, 39.9, 5.32, 37.6),
        (35, 42.2, 5.62, 39.6),
        (36, 44.6, 5.94, 41.7),
        (37, 47.1, 6.28, 43.9),
        (38, 49.7, 6.62, 46.2),
        (39, 52.4, 6.99, 48.6),
        (40, 55.3, 7.38, 51.2),
        (41, 58.3, 7.78, 53.8),
        (42, 61.5, 8.20, 56.5),
        (43, 64.8, 8.64, 59.4),
        (44, 68.3, 9.10, 62.3),
        (45, 71.9, 9.58, 65.4),
        (46, 75.7, 10.09, 68.6),
        (47, 79.6, 10.61, 72.0),
        (48, 83.7, 11.16, 75.5),
        (49, 88.0, 11.74, 79.1),
        (50, 92.5, 12.33, 82.8),
        (51, 97.2, 12.96, 86.8),
        (52, 102.1, 13.61, 90.8),
        (53, 107.2, 14.29, 95.1),
        (54, 112.5, 15.00, 99.5),
        (55, 118.0, 15.73, 104.0),
        (56, 123.8, 16.51, 108.8),
        (57, 129.8, 17.31, 113.7),
        (58, 136.1, 18.15, 118.8),
        (59, 142.6, 19.01, 124.1),
        (60, 149.4, 19.92, 129.5),
        (61, 156.4, 20.85, 135.2),
        (62, 163.8, 21.84, 141.1),
        (63, 171.4, 22.85, 147.2),
        (64, 179.3, 23.91, 153.5),
        (65, 187.5, 25.00, 160.1),
        (66, 196.1, 26.15, 166.8),
        (67, 205.0, 27.33, 173.9),
        (68, 214.2, 28.56, 181.1),
        (69, 223.7, 29.83, 188.6),
        (70, 233.7, 31.16, 196.4),
        (71, 243.9, 32.52, 204.4),
        (72, 254.6, 33.95, 212.7),
        (73, 265.7, 35.43, 221.3),
        (74, 277.2, 36.96, 230.1),
        (75, 289.1, 38.55, 239.3),
        (76, 301.4, 40.19, 248.7),
        (77, 314.1, 41.88, 258.5),
        (78, 327.3, 43.64, 268.6),
        (79, 341.0, 45.47, 279.0),
        (80, 355.1, 47.35, 289.7),
        (81, 369.7, 49.29, 300.8),
        (82, 384.9, 51.32, 312.2),
        (83, 400.6, 53.41, 324.0),
        (84, 416.8, 55.57, 336.2),
        (85, 433.6, 57.81, 348.7),
        (86, 450.9, 60.12, 361.6),
        (87, 468.7, 62.49, 374.9),
        (88, 487.1, 64.95, 388.6),
        (89, 506.1, 67.48, 402.8),
        (90, 525.8, 70.10, 417.3),
        (91, 546.1, 72.81, 432.3),
        (92, 567.0, 75.60, 447.7),
        (93, 588.6, 78.48, 463.6),
        (94, 610.9, 81.45, 480.0),
        (95, 633.9, 84.52, 496.8),
        (96, 657.6, 87.68, 514.1),
        (97, 682.1, 90.94, 531.9),
        (98, 707.3, 94.30, 550.2),
        (99, 733.2, 97.76, 569.1),
        (100, 760.0, 101.33, 588.5),
    ]

    def _get_rows_pairs(self):
        for index in range(len(self.T_P_Pmm_rho) - 1):
            yield self.T_P_Pmm_rho[index], self.T_P_Pmm_rho[index + 1]

    def _get_index_by_index(self, value, search_index, result_index):
        for row, next_row in self._get_rows_pairs():
            if row[search_index] <= value < next_row[search_index]:
                return (value - row[search_index]) / (next_row[search_index] - row[search_index]) * (next_row[result_index] - row[result_index]) + row[result_index]

        if value == self.T_P_Pmm_rho[-1][search_index]:
            return self.T_P_Pmm_rho[-1][result_index]

        # TODO: delete dirty hack
        if search_index == 1 and value < self.T_P_Pmm_rho[0][search_index]:
            return 0

        log.error(f'Failed to find {value} at index {search_index}')
        raise RuntimeError()

    def get_rho_by_t(self, t):
        return self._get_index_by_index(t, 0, 3)

    def get_p_by_t(self, t):
        return self._get_index_by_index(t, 0, 1)

    def get_t_by_rho(self, rho):
        return self._get_index_by_index(rho, 3, 0)

    def get_t_by_p(self, rho):
        return self._get_index_by_index(rho, 1, 0)


def test_vapor():
    vapor = Vapor()
    assert vapor.get_rho_by_t(80) == 293
    assert vapor.get_rho_by_t(65) == 164
    assert vapor.get_rho_by_t(100) == 598
    assert vapor.get_t_by_rho(293) == 80


test_vapor()
