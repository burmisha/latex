import generators.variant as variant
from generators.helpers import Consts, Fraction, UnitValue


@variant.text('''
    Установка для наблюдения интерференции состоит
    из двух когерентных источников света и экрана.
    Расстояние между источниками {l:Task:e},
    а от каждого источника до экрана — {L:Task:e}.
    Сделайте рисунок и укажите положение нулевого максимума освещенности,
    а также определите расстояние между {n_text} {what} и нулевым максимумом.
    Длина волны падающего света составляет {lmbd:Task:e}.
''')
@variant.arg(l='l = 0.8/1.2/1.5/2.4 мм')
@variant.arg(L='L = 2/3/4 м')
@variant.arg(lmbd='\\lambda = 400/450/500/550/600 нм')
@variant.arg(what='максимумом/минимумом')
@variant.arg(n__n_text=[(2, 'вторым'), (3, 'третьим'), (4, 'четвёртым')])
@variant.solution_space(180)
@variant.answer_align([
    'l_1^2 &= L^2 + \\sqr{x - \\frac \\ell 2}',
    'l_2^2 &= L^2 + \\sqr{x + \\frac \\ell 2}',
    'l_2^2 - l_1^2 &= 2x\\ell '
        '\\implies (l_2 - l_1)(l_2 + l_1) = 2x\\ell '
        '\\implies n\\lambda * 2L \\approx 2x_n\\ell '
        '\\implies x_n = \\frac{\\lambda L}{\\ell} n, n\\in \\mathbb{N}',
    'x &= \\frac{\\lambda L}{\\ell} * {ratio:LaTeX} = \\frac{{lmbd:V} * {L:V}}{l:V:s} * {ratio:LaTeX} \\approx {x:V}',
])
class Vishnyakova_example_11(variant.VariantTask):
    def GetUpdate(self, *, l=None, L=None, lmbd=None, what=None, n=None, n_text=None):
        if what == 'максимумом':
            ratio = Fraction(n)
        elif what == 'минимумом':
            ratio = - Fraction(1) / 2 + n
        else:
            raise RuntimeError()

        return dict(
            x=(lmbd * L / l * float(ratio)).IncPrecision(2).As('мм'),
            ratio=ratio,
        )


# 1. Два когерентных источника звука совершают колебания в одинаковой фазе.
# В точке, отстоящей на 2,3 м от первого источника и на 2,4 м от второго,
# звук практически не слышен. При какой минимальной частоте звука это возможно?
# Скорость звука в воздухе 330 м/с. 

# 2. На поверхности воды распространяются волны длиной 30 см
# от двух точечных когерентных источников, колеблющихся в одинаковой фазе.
# В некоторой области волны перекрываются. В этой области амплитуды волн практически
# одинаковы и равны 6 см. Какова амплитуда колебаний частиц поверхности воды в точке,
# разность хода волн до которой составляет:
#      а) 30 см?
#      6) 45 см?

# 3. В некоторой точке пространства разность хода световых волн, полученных
# от двух когерентных источников света, в 4 раза больше длины волны.
# Что будет наблюдаться в данной точке?


@variant.text('''
    В некоторую точку пространства приходят две когерентные световые волны
    с разностью хода {l:V:e}. Определите, что наблюдается в этой точке.
    Длина волны равна {lmbd:V:e}.
''')
@variant.solution_space(80)
@variant.arg(lmbd='\\lambda = 400/500/600/700 нм')
@variant.arg(n=[3, 4, 5, 6])
@variant.arg(add=[0, 1])
@variant.answer_short('\\text{{answer}}')
class Gendenshteyn_11_22_4(variant.VariantTask):
    def GetUpdate(self, *, lmbd=None, n=None, add=None):
        l = (lmbd * (n + add / 2)).IncPrecision(1).As('мкм')
        if add == 0:
            answer = 'точка максимума'
        elif add == 1:
            answer = 'точка минимума'
        else:
            raise RuntimeError()
        return dict(
            l=l,
            answer=answer,
        )


# 5. Минимальная разность хода, при которой две когерентные световые волны
# ослабляют друг друга при интерференции, равна 250 нм. Чему равна длина волны?

# 6. В точке, находящейся на равных расстояниях от двух точечных когерентных источников
# волн, наблюдается интерференционный минимум. Чему равна минимально возможная разность
# фаз колебаний источников?

# 7. Два точечных когерентных монохроматических источника света $S_1$ и $S_2$
# находятся на расстоянии 2 мм друг от друга и на расстоянии 8 м от экрана.
# Если из $S_1$ и $S_2$ опустить перпендикуляры на экран, то их основания
# будут совпадать с положениями двух соседних тёмных полос интерференционной картины.
# Чему равна длина волны света?

# 8. При изучении явления интерференции оказалось,
# что положение интерференционного максимума второго порядка для
# красного света совпадает с положением интерференционного максимума
# третьего порядка для синего света.
# Длина волны, соответствующая красному цвету, равна 690 нм.
# Чему равна длина волны, соответствующая синему цвету?

# 9. Экран расположен на расстоянии 6 м от двух когерентных монохроматических источников.
# Расстояние между двумя ближайшими светлыми полосами, лежащими
# по разные стороны от центрального максимума, 4,8 мм.
# Расстояние между источниками равно 1 мм. Чему равна длина световой волны?

# 10. Когерентные источники света, расстояние между которыми 2 мм,
# находятся в плоскости, параллельной экрану. Расстояние между
# соседними интерференционными полосами на экране равно 2,1 мм.
# Длина волны 600 нм. Чему равно расстояние между источниками света и экраном?

# 11. Два очень тонких полупрозрачных зеркала расположены параллельно друг другу. 
# На них перпендикулярно плоскости зеркал падает световая волна длиной 600 нм. 
# При каком минимальном расстоянии между зеркалами будет наблюдаться 
# интерференционный минимум для проходящих световых волн?

# 12. Два очень тонких полупрозрачных зеркала расположены параллельно друг другу. 
# На них перпендикулярно плоскости зеркал падает световая волна. Длина волны 600 нм. 
# При каком минимальном расстоянии между зеркалами будет наблюдаться
# интерференционный максимум для отражённого света?

# 13. Чтобы уменьшить коэффициент отражения света от поверхности стекла,
# на него наносят тонкую прозрачную плёнку с показателем преломления п, меньшим, чем у стекла.
# Найдите наименьшую необходимую для погашения отражённого света толщину плёнки,
# приняв, что $n_1 \\sqrt{n}$, где n — показатель преломления стекла. 
# Длина волны света 500 нм, свет падает перпендикулярно поверхности стекла. 

# 14. Между краями двух хорошо отшлифованных тонких плоских стеклянных
# пластинок помещена тонкая проволочка диаметром 0,085 мм.
# Противоположные концы пластинок плотно прижаты друг к другу (рис. 22.1). 
# Расстояние от проволочки до линии соприкосновения пластинок равно 25 см. 
# На верхнюю пластинку перпендику лярно к её поверхности падает
# монохроматический пучок света с длинойволны 700 нм.
# Определите количество наблюдаемых интерференционных полос на 1 см длины клина.

# 19. Два когерентных источника монохроматического света с длиной волны \\lambda = 600 нм 
# находятся на расстоянии А. А, =1 мм друг от друга и на одинаковом расстоянии 
# Г, = 3 м от экрана. Каково расстояние х между ближайшими интерференционными
# максимумами на экране? Обязательно ли будет наблюдаться максимум освещённости в точке О,
# равноудалённой от обоих источников?



@variant.text('''
    На стеклянную пластинку ({n1:Task:e}) нанесена прозрачная пленка ({n2:Task:e}).
    На плёнку нормально к поверхности падает монохроматический свет с длиной волны {lmbd:V:e}.
    Какова должна быть минимальная толщина пленки, чтобы в результате интерференции отражённый свет имел {which} интенсивность?
''')
@variant.solution_space(150)
@variant.arg(n1='\\hat n = 1.5/1.6')
@variant.arg(n2='n = 1.3/1.4/1.7/1.8')
@variant.arg(lmbd='\\lambda = 420/480/540/640 нм')
@variant.arg(which='наибольшую/наименьшую')
@variant.answer_short('2 * h * {n2:L} = {delta:LaTeX} \\lambda \\implies h \\approx {h:V}')
class Belolipetsky_5_196(variant.VariantTask):
    def GetUpdate(self, *, n1=None, n2=None, lmbd=None, which=None):
        if n1.SI_Value > n2.SI_Value:
            delta = Fraction(0)
        else:
            delta = Fraction(1) / 2

        if which == 'наибольшую':
            pass
        elif which == 'наименьшую':
            delta += Fraction(1) / 2
        else:
            raise RuntimeError()

        if delta == 0:
            delta += 1

        return dict(
            delta=delta,
            h=(lmbd / 2 * float(delta) / n2).IncPrecision(1).As('нм'),
        )


@variant.text('''
    Разность фаз двух интерферирующих световых волн равна ${n}\\pi$,
    а разность хода между ними равна {l:V:e}. Определить длину и частоту волны.
''')
@variant.solution_space(100)
@variant.arg(n=[3, 4, 5, 6, 7, 8])
@variant.arg(l='\\ell = 7.5/9.5/10.5/12.5/15.5 10^{-7} м')
@variant.answer_align([
    '\\Delta \\varphi &= k\\Delta l = \\frac{2 \\pi}{\\lambda} \\Delta l = {n}\\pi \\implies \\lambda = {ratio:LaTeX}\\Delta l \\approx {lmbd:V},',
    '\\nu = \\frac 1T = \\frac c\\lambda = {ratio_nu:LaTeX} \\frac c{\\Delta l} = {ratio_nu:LaTeX} * \\frac{c:V:s}{l:V:s} \\approx {nu:V}.'
])
class Vishnyakova_3_6_12(variant.VariantTask):
    def GetUpdate(self, *, l=None, n=None):
        c = Consts.c
        ratio = Fraction(2) / n
        ratio_nu = Fraction(n) / 2

        return dict(
            lmbd=(l * float(ratio)).IncPrecision(1).As('нм'),
            nu=(c / l * float(ratio_nu)).IncPrecision(1).As('ТГц'),
            c=c,
            ratio=ratio,
            ratio_nu=ratio_nu,
        )

# @variant.text('''
#     Расстояние между соседними темными интерференционными полосами на экране Ах.
#     Два когерентных источника света лежат в плоскости, параллельной экрану, на расстоянии Г, от него.
#     Длина световой волны ^. Каково расстояние между источниками света?
# ''')
# @variant.solution_space(100)
# class Vishnyakova_3_6_13(variant.VariantTask):
#     pass


@variant.text('''
    Два точечных когерентных источника света $S_1$ u $S_2$ расположены в плоскости, параллельной экрану, на расстоянии {L:V:e} от него.
    На экране в точках, лежащих на перпендикулярах, опущенных из источников света $S_1$ и $S_2$,
    находятся первые {which} полосы. Определите расстояние $S_1S_2$ между источниками, результат выразите в миллиметрах.
    Длина волны равна {lmbd:V:e}.
''')
@variant.solution_space(100)
@variant.arg(lmbd='\\lambda = 350/420/480/550/640 нм')
@variant.arg(L='L = 2.4/3.2/4.5/5.4/7.2 м')
@variant.arg(which='тёмные/светлые')
@variant.answer_align([
    'x_n = \\frac{\\lambda L}{\\ell} n, n\\in \\mathbb{N} \\leftarrow \\text{точки максимума},',
    '{n} \\frac{\\lambda L}{\\ell} = \\ell \\implies \\ell \\sqrt{ {n} * \\lambda L } \\approx {l:V}.'
])
class Vishnyakova_3_6_14(variant.VariantTask):
    def GetUpdate(self, *, lmbd=None, L=None, which=None):
        if which == 'тёмные':
            n = 1
        elif which == 'светлые':
            n = 2
        else:
            raise RuntimeError()
        l = UnitValue('%.2f мм' % (n * float(lmbd.SI_Value * L.SI_Value) ** 0.5 * 1000))
        return dict(
            l=l,
            n=n,
        )
